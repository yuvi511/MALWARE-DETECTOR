from flask import Flask, render_template
import pandas as pd
import numpy as np
from sklearn.preprocessing import LabelEncoder
from sklearn.impute import SimpleImputer
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.feature_selection import SelectFromModel
import matplotlib.pyplot as plt
import io
import base64

import matplotlib
matplotlib.use('Agg')  # Use the Agg backend

app = Flask(__name__)

# Load the dataset
data = pd.read_csv("dataset_malwares.csv")

# Drop non-numeric columns
data = data.drop(columns=["Name"])

# Impute missing values
imputer = SimpleImputer(strategy="mean")
data = pd.DataFrame(imputer.fit_transform(data), columns=data.columns)

# Preprocess target variable if necessary
label_encoder = LabelEncoder()
data["Malware"] = label_encoder.fit_transform(data["Malware"])

X = data.drop(columns=["Malware"])  # Features
y = data["Malware"]  # Target

# Split the data into train and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Feature selection using Random Forest
feature_selector = SelectFromModel(RandomForestClassifier(n_estimators=100, random_state=42))
feature_selector.fit(X_train, y_train)

# Transforming datasets
X_train_selected = feature_selector.transform(X_train)
X_test_selected = feature_selector.transform(X_test)

# Load the trained model
best_model = RandomForestClassifier(n_estimators=100, random_state=42)
best_model.fit(X_train_selected, y_train)

@app.route('/')
def home():
    # Select a random sample from the test dataset
    sample_index = np.random.randint(0, len(X_test_selected))
    sample_features = X_test_selected[sample_index]

    # Predict using the trained model
    sample_prediction = best_model.predict([sample_features])
    sample_probability = np.max(best_model.predict_proba([sample_features]))

    # Perform graphical analysis
    plt.figure(figsize=(8, 6))
    plt.bar(['Benign', 'Malware'], best_model.predict_proba([sample_features])[0], color=['lightgreen', 'lightcoral'])
    plt.title('Probability Distribution')
    plt.xlabel('Class')
    plt.ylabel('Probability')
    plt.ylim(0, 1)

    # Save the probability distribution plot to a bytes object
    img = io.BytesIO()
    plt.savefig(img, format='png')
    img.seek(0)
    plot_url = base64.b64encode(img.getvalue()).decode()

    # Generate additional graphs
    # Example: Pie chart showing class distribution in the dataset
    class_distribution = data['Malware'].value_counts()
    plt.figure(figsize=(8, 6))
    plt.pie(class_distribution, labels=['Benign', 'Malware'], autopct='%1.1f%%', colors=['lightgreen', 'lightcoral'])
    plt.title('Class Distribution')
    plt.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle

    # Save the class distribution pie chart to a bytes object
    img2 = io.BytesIO()
    plt.savefig(img2, format='png')
    img2.seek(0)
    class_distribution_plot_url = base64.b64encode(img2.getvalue()).decode()

    # Return the result
    return render_template('sample.html', sample_features=sample_features,
                           sample_prediction=sample_prediction[0], sample_probability=sample_probability,
                           plot_url=plot_url, class_distribution_plot_url=class_distribution_plot_url)

if __name__ == '__main__':
    port = 5000
    app.run(debug=True, port=port)
